# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
# This file is machine-generated by mktables from the Unicode
# database, Version 6.1.0.  Any changes made here will be lost!

# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!
# This file is for internal use by core Perl only.  The format and even the
# name or existence of this file are subject to change without notice.  Don't
# use it directly.

# Use Unicode::UCD::prop_invlist() to access the contents of this file.
# 
# This file is for tables that are not necessarily related:  To conserve
# resources, every table that matches the identical set of code points in
# this version of Unicode uses this file.  Each one is listed in a separate
# group below.  It could be that the tables will match the same set of code
# points in other Unicode releases, or it could be purely coincidence that
# they happen to be the same in Unicode 6.1.0, and hence may not in other
# versions.
# 
# This file returns the 1272 code points in Unicode Version 6.1.0 that match
# any of the following regular expression constructs:
# 
#         \p{Script_Extensions=Latin}
#         \p{Scx=Latn}
# 
#         \p{Script=Latin}
#         \p{Sc=Latn}
# 
#         \p{Latin}
#         \p{Is_Latin}
#         \p{Latn}
#         \p{Is_Latn}
# 
# perluniprops.pod should be consulted for the syntax rules for any of these,
# including if adding or subtracting white space, underscore, and hyphen
# characters matters or doesn't matter, and other permissible syntactic
# variants.  Upper/lower case distinctions never matter.
# 
# A colon can be substituted for the equals sign, and within each group
# above, anything to the left of the equals (or colon) can be combined with
# anything to the right.  Thus, for example,
#         \p{Sc: Latin}
# is also valid.
# 
# The format of the lines of this file is: START\tSTOP\twhere START is the
# starting code point of the range, in hex; STOP is the ending point, or if
# omitted, the range has just one code point.  Numbers in comments in
# [brackets] indicate how many code points are in the range.

return <<'END';
0041	005A	# [26]
0061	007A	# [26]
00AA		
00BA		
00C0	00D6	# [23]
00D8	00F6	# [31]
00F8	02B8	# [449]
02E0	02E4	# [5]
1D00	1D25	# [38]
1D2C	1D5C	# [49]
1D62	1D65	# [4]
1D6B	1D77	# [13]
1D79	1DBE	# [70]
1E00	1EFF	# [256]
2071		
207F		
2090	209C	# [13]
212A	212B	# [2]
2132		
214E		
2160	2188	# [41]
2C60	2C7F	# [32]
A722	A787	# [102]
A78B	A78E	# [4]
A790	A793	# [4]
A7A0	A7AA	# [11]
A7F8	A7FF	# [8]
FB00	FB06	# [7]
FF21	FF3A	# [26]
FF41	FF5A	# [26]
END
